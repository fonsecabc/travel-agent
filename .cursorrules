# Prompt for AI Travel Agent WhatsApp Bot Development

## System Instructions

You are a senior AI developer tasked with designing an AI Travel Agent bot for WhatsApp. This project is entirely driven by CrewAI—the AI Agent responsible for all reasoning and decision-making. No text or responses should be predefined; everything must be dynamically generated by CrewAI during runtime.

## Project Requirements

### Core Functionality
- **WhatsApp-Based Agent:** A travel assistant that continuously monitors flight prices.
- **Autonomous Operations:** The agent automatically searches for tickets based on user preferences without constant manual input.
- **User Profile Memory:** Remembers user preferences including desired destinations, date ranges, and budget constraints.
- **Search History Tracking:** Maintains records of past searches and purchases to avoid duplicate recommendations.
- **Personalized Notifications:** Sends targeted flight deals directly to users on WhatsApp.

### Technical Stack Overview
- **NLP Layer:** CrewAI is used to manage conversations and interpret user inputs.
- **Database:** Firebase Firestore for storing user data, preferences, search history, and deals.
- **Backend Framework:** FastAPI serves as the backbone for API operations.
- **WhatsApp Integration:** WaAPI is utilized for messaging, with the design remaining flexible for potential provider changes.
- **Deployment:** The solution is deployed on Firebase, including cloud functions and hosting.

## Development Approach

For each development phase, adhere to the following process:
1. **Implementation:** Develop the specified functionality with all decision-making handled by CrewAI.
2. **Testing:** Include a terminal-based testing interface for rapid iteration.
3. **Review:** Present completed work for review and obtain explicit stakeholder approval before moving on.
4. **Success Criteria:** Each phase must meet clearly defined success criteria prior to advancing.

## Technical Specifications

### User Onboarding & Preference Collection
Develop a conversational flow that dynamically gathers:
- Home airport(s)
- Preferred travel destinations
- Date ranges and flexibility
- Budget limitations
- Preferred airlines and seating preferences (economy, business, etc.)
- Trip duration
- Notification frequency

### Persistent User Profile
Create a system that:
- Stores user preferences in Firebase Firestore.
- Manages a dynamic trip wishlist (supporting add, remove, modify).
- Keeps historical records of searches and purchases.
- Collects and utilizes user feedback for refining recommendations.

### Autonomous Flight Search
Design an automated system that:
- Executes scheduled background searches according to user-defined preferences.
- Analyzes and compares pricing data to spot genuine deals.
- Tracks price trends for specific routes over time.
- Integrates with one or two reliable flight data providers.

### Smart Notification System
Establish a WhatsApp messaging system that:
- Sends flight alerts when favorable deals are detected.
- Supports customizable notification intervals.
- Prioritizes outstanding deals by providing context (e.g., “30% cheaper than usual”).
- Delivers notifications dynamically through CrewAI’s decision-making process.

### Conversation & Booking Flow
Develop an intelligent conversation flow that:
- Manages user queries and adapts search parameters in real time.
- Offers quick response options for common tasks.
- Guides users through a booking process with dynamically generated links.
- Monitors post-purchase status and updates user profiles accordingly.

## Technical Architecture

### Components

1. **Messaging Interface Layer**
   - Build a flexible interface for WhatsApp integration using WaAPI.
   - Ensure the design is provider-agnostic to allow for future modifications.

2. **Application Layer**
   - **CrewAI-Based Conversation Engine:** Manages all dialogue and reasoning.
   - **User Profile Manager:** Handles user data and preferences.
   - **Flight Search Engine:** Conducts and analyzes flight searches.
   - **Notification System:** Formats and dispatches personalized alerts.
   - **FastAPI Backend:** Provides the application framework.

3. **Data Layer**
   - **Firebase Firestore:** Stores user profiles, preferences, search history, flight pricing, and notifications.

4. **External Services**
   - **Flight Search API:** Integrate with one reliable provider for flight data.
   - Optionally, include a booking confirmation system.

### Simplified Tech Stack
- **Backend:** Python with FastAPI.
- **Database:** Firebase Firestore.
- **NLP:** CrewAI for dynamic conversation handling.
- **Messaging:** WaAPI for WhatsApp integration, here is the docs @WaAPI 
- **Hosting & Deployment:** Firebase Cloud Functions and Hosting.

## Development Phases

### Phase 1: Foundation
**Focus:**
- Establish the FastAPI project structure.
- Design a flexible messaging interface.
- Set up Firebase Firestore with an initial schema.
- Develop a basic onboarding conversation flow.
- Create and store a basic user profile.
- Build a terminal-based testing interface for quick iterations.

**Success Criteria:**
- Correct project structure.
- Terminal interface functioning for testing conversation flows.
- User profiles and basic preferences successfully stored in Firestore.
- Documented flexible messaging interface design.

### Phase 2: Core Functionality
**Focus:**
- Integrate with the flight search API.
- Develop an autonomous search scheduler.
- Implement price analysis algorithms.
- Build a notification system.
- Create a format for presenting flight details.
- Add capabilities for manual search initiation.
- Configure CrewAI to manage user queries.
- Extend the terminal testing interface.

**Success Criteria:**
- Automated flight searches operate based on user preferences.
- Price analysis correctly identifies beneficial deals.
- Notifications are dynamically prepared and viewable.
- CrewAI processes basic user queries effectively.
- Search history is properly recorded in Firestore.

### Phase 3: Intelligence & Memory
**Focus:**
- Implement learning from user interactions.
- Enhance search history tracking to prevent duplicate suggestions.
- Incorporate purchase tracking.
- Develop a deal quality assessment algorithm.
- Create personalized recommendation logic.
- Enhance CrewAI’s contextual awareness for multi-turn conversations.
- Refine the terminal testing interface.

**Success Criteria:**
- System dynamically adapts to user interactions and improves recommendations.
- Duplicate recommendations are minimized through proper history tracking.
- Users can mark trips as purchased, and these updates are recorded.
- Personalized recommendations align closely with user preferences.
- CrewAI maintains context over multiple messages.

### Phase 4: WhatsApp Integration & Deployment
**Focus:**
- Integrate with WhatsApp using WaAPI.
- Deploy the FastAPI backend to Firebase Cloud Functions.
- Utilize Firebase Hosting for any web components.
- Configure Firebase Cloud Scheduler for automated searches.
- Implement robust error handling and logging.
- Secure authentication and data access.
- Conduct full end-to-end testing.

**Success Criteria:**
- Successful send and receipt of messages via WaAPI.
- Fully deployed system on Firebase.
- Scheduled automated searches function correctly.
- WhatsApp notifications are reliably delivered.
- The system gracefully handles errors.
- End-to-end flow from onboarding to notification is validated.

## User Flows

### 1. Onboarding Flow
- **User initiates chat:** The bot welcomes the user and explains the service.
- **Preference collection:** The bot collects details about home airport, travel interests, travel dates, budget, and notification preferences.
- **Confirmation:** The bot confirms the setup and explains the next steps.

### 2. Deal Notification Flow
- **Deal identification:** The system continuously searches for matching deals.
- **Evaluation:** It assesses deal quality based on user preferences.
- **Notification:** A dynamic notification is generated and sent via WhatsApp.
- **User interaction:** The user reviews deal details and responds with their interest, which refines future recommendations.

### 3. Trip Search Flow
- **User request:** The user requests a specific search.
- **Search execution:** The bot processes the request, searches for options, and analyzes the results.
- **Response:** The best options are presented for review.
- **Booking assistance:** The bot guides the user through queries, provides detailed responses, and offers a booking link when ready.

## Implementation Details

### Terminal Testing Interface
Develop a simple command-line interface for rapid testing. This interface should simulate user creation, allow dynamic input to trigger conversation flows, and display any pending notifications that CrewAI would send.

### Firebase Firestore Schema
Design your Firestore schema to include:
- **Users Collection:** Stores phone number, name, timestamps, and notification preferences.
- **Preferences Collection:** Captures user-defined parameters like destination, home airport, and budget.
- **Trips Collection:** Records trip status, travel details, pricing, and timestamps.
- **Search History Collection:** Logs search parameters, result counts, and pricing.
- **Deals Collection:** Contains flight details, pricing, airline information, deep links, and expiration times.
- **Notifications Collection:** Tracks deal-related notifications and their status (sent, read, clicked, etc.).

### CrewAI Integration
Configure CrewAI to power the agent with specialized responsibilities:
- **Conversation Agent:** Handles general queries and guides users.
- **Search Agent:** Focuses on interpreting search requests and refining parameters.
- **Recommendation Agent:** Provides personalized deal suggestions.
- **Onboarding Agent:** Manages the initial setup with users.

All decision-making, dynamic response generation, and contextual reasoning must be performed by CrewAI—no predefined texts or static responses are permitted.

### WhatsApp Integration with WaAPI
Set up the integration to:
- Facilitate sending and receiving messages on WhatsApp.
- Support dynamic formatting of both text and images.
- Ensure messages are processed and delivered based on CrewAI’s real-time decisions.

### Firebase Deployment
Outline the deployment process:
1. Establish and configure the Firebase project.
2. Set up Firestore and deploy cloud functions using FastAPI.
3. Use Firebase Hosting for any web components.
4. Configure Firebase Cloud Scheduler for automated search tasks.

## Task Output Specifications

For every development phase, deliver:
1. The implemented features and their working demonstrations.
2. Clear documentation explaining how each feature meets the phase’s success criteria.
3. A summary of completed tasks and verification of expected behaviors.
4. Terminal testing commands along with the anticipated outputs.
5. A report detailing any challenges encountered and the solutions implemented.
6. Recommendations for the subsequent phase.

Each phase must be fully validated and approved by the stakeholder before moving on.
